lexer grammar vbLexer;

// 2. Lexical grammar

// keywords
ADDHANDLER: A D D H A N D L E R;
ADDRESSOF: A D D R E S S O F;
AGGREGATE: A G G R E G A T E;
ALIAS: A L I A S;
AND: A N D;
ANDALSO: A N D A L S O;
ANSI: A N S I;
AS: A S;
ASCENDING: A S C E N D I N G;
ASSEMBLY: A S S E M B L Y;
ASYNC: A S Y N C;
AUTO: A U T O;
AWAIT: A W A I T;
BINARY: B I N A R Y;
BOOLEAN: B O O L E A N;
BY: B Y;
BYREF: B Y R E F;
BYTE: B Y T E;
BYVAL: B Y V A L;
CALL: C A L L;
CASE: C A S E;
CATCH: C A T C H;
CBOOL: C B O O L;
CBYTE: C B Y T E;
CCHAR: C C H A R;
CDATE: C D A T E;
CDBL: C D B L;
CDEC: C D E C;
CHAR: C H A R;
CINT: C I N T;
CLASS: C L A S S;
CLNG: C L N G;
COBJ: C O B J;
COMPARE: C O M P A R E;
CONST: C O N S T;
CONTINUE: C O N T I N U E;
CSBYTE: C S B Y T E;
CSHORT: C S H O R T;
CSNG: C S N G;
CSTR: C S T R;
CTYPE: C T Y P E;
CUINT: C U I N T;
CULNG: C U L N G;
CUSHORT: C U S H O R T;
CUSTOM: C U S T O M;
DATE: D A T E;
DECIMAL: D E C I M A L;
DECLARE: D E C L A R E;
DEFAULT: D E F A U L T;
DELEGATE: D E L E G A T E;
DESCENDING: D E S C E N D I N G;
DIM: D I M;
DIRECTCAST: D I R E C T C A S T;
DISTINCT: D I S T I N C T;
DO: D O;
DOUBLE: D O U B L E;
EACH: E A C H;
ELSE: E L S E;
ELSEIF: E L S E I F;
END: E N D;
ENUM: E N U M;
EQUALSKEYWORD: E Q U A L S;
ERASE: E R A S E;
ERROR: E R R O R;
EVENT: E V E N T;
EXIT: E X I T;
EXPLICIT: E X P L I C I T;
FINALLY: F I N A L L Y;
FOR: F O R;
FRIEND: F R I E N D;
FROM: F R O M;
FUNCTION: F U N C T I O N;
GET: G E T;
GETTYPE: G E T T Y P E;
GLOBAL: G L O B A L;
GOTO: G O T O;
GROUP: G R O U P;
HANDLES: H A N D L E S;
IF: I F;
IMPLEMENTS: I M P L E M E N T S;
IMPORTS: I M P O R T S;
IN: I N;
INFER: I N F E R;
INHERITS: I N H E R I T S;
INTEGER: I N T E G E R;
INTERFACE: I N T E R F A C E;
INTO: I N T O;
IS: I S;
IS_FALSE: I S F A L S E;
IS_TRUE: I S T R U E;
ISNOT: I S N O T;
ITERATOR: I T E R A T O R;
JOIN: J O I N;
KEY: K E Y;
LET: L E T;
LIB: L I B;
LIKE: L I K E;
LONG: L O N G;
LOOP: L O O P;
ME: M E;
MID: M I D;
MOD: M O D;
MODULE: M O D U L E;
MUST_INHERIT: M U S T I N H E R I T;
MUSTOVERRIDE: M U S T O V E R R I D E;
MYBASE: M Y B A S E;
MYCLASS: M Y C L A S S;
NAMESPACE: N A M E S P A C E;
NARROWING: N A R R O W I N G;
NEW: N E W;
NEXT: N E X T;
NOT: N O T;
NOT_INHERITABLE: N O T I N H E R I T A B L E;
NOTHING: N O T H I N G;
NOTOVERRIDABLE: N O T O V E R R I D A B L E;
OBJECT: O B J E C T;
OF: O F;
OFF: O F F;
ON: O N;
OPERATORKEYWORD: O P E R A T O R;
OPTION: O P T I O N;
OPTIONAL: O P T I O N A L;
OR: O R;
ORDER: O R D E R;
ORELSE: O R E L S E;
OUT: O U T;
OVERLOADS: O V E R L O A D S;
OVERRIDABLE: O V E R R I D A B L E;
OVERRIDES: O V E R R I D E S;
PARAM_ARRAY: P A R A M A R R A Y;
PARTIAL: P A R T I A L;
PRESERVE: P R E S E R V E;    
PRIVATE: P R I V A T E;
PROPERTY: P R O P E R T Y;
PROTECTED: P R O T E C T E D;
PUBLIC: P U B L I C;
RAISEEVENT: R A I S E E V E N T;
READONLY: R E A D O N L Y;
REDIM: R E D I M;
REGION: R E G I O N;
REM: R E M;
REMOVEHANDLER: R E M O V E H A N D L E R;
RESUME:  R E S U M E;
RETURN: R E T U R N;
SBYTE: S B Y T E;
SELECT: S E L E C T;
SET: S E T;
SHADOWS: S H A D O W S;
SHARED: S H A R E D;
SHORT: S H O R T;
SINGLE: S I N G L E;
SKIP_KEYWORD: S K I P;
STATIC: S T A T I C;
STEP: S T E P;
STOP: S T O P;
STRICT: S T R I C T;
STRING: S T R I N G;
STRUCTURE: S T R U C T U R E;
SUB: S U B;
SYNCLOCK: S Y N C L O C K;
TAKE: T A K E;
TEXT: T E X T;
THEN: T H E N;
THROW: T H R O W;
TO: T O;
TRY: T R Y;
TRYCAST: T R Y C A S T;
TYPEOF: T Y P E O F;
UINTEGER: U I N T E G E R;
ULONG: U L O N G;
UNICODE: U N I C O D E;
UNTIL: U N T I L;
USHORT: U S H O R T;
USING: U S I N G;
When: W H E N;
WHEN: W H E N;
WHERE: W H E R E;
WHILE: W H I L E;
WIDENING: W I D E N I N G;
WITH: W I T H;
WITH_EVENTS: W I T H E V E N T S;
WRITEONLY: W R I T E O N L Y;
XOR: X O R;
YIELD: Y I E L D;

// xml tags
GET_XML_NAMESPACE: 'GetXmlNamespace';
XML9: '<Unicode tab character (0x0009)>';
XMLA: '<Unicode linefeed character (0x000A)>';
XMLD: '<Unicode carriage return character (0x000D)>';
XMLLetter: '<Unicode character as defined in the Letter production of the XML 1.0 specification>';
XMLDigit: '<Unicode character as defined in the Digit production of the XML 1.0 specification>';
XMLCombiningCharacter: '<Unicode character as defined in the CombiningChar production of the XML 1.0 specification>';
XMLExtender: '<Unicode character as defined in the Extender production of the XML 1.0 specification>';
XMLString: XMLCharacter+;
XMLWhitespace: XMLWhitespaceCharacter+;
XMLWhitespaceCharacter: XMLD | XMLA | '<Unicode space character (0x0020)>' | XML9;
XMLProcessingTarget: '<Any xMLName except a casing permutation of the string "xml">';
XMLProcessingValue: '<Any XMLString that does not contain a question-mark followed by ">">';
XMLCharacter: XML9 | XMLA | XMLD;
XMLLatinAlphaCharacter: '<Unicode Latin alphabetic character (0x0041-0x005a, 0x0061-0x007a)>';
XMLNumericCharacter: '<Unicode digit character (0x0030-0x0039)>';
XMLHexNumericCharacter: XMLNumericCharacter | '<Unicode Latin hex alphabetic character (0x0041-0x0046, 0x0061-0x0066)>';
XMLPeriodCharacter: '<Unicode period character (0x002e)>';
XMLUnderscoreCharacter: '<Unicode underscore character (0x005f)>';
XMLDashCharacter: '<Unicode dash character (0x002d)>';
XMLCommentCharacter: '<Any XMLCharacter except dash (0x002D)>'| MINUS '<Any XMLCharacter except dash (0x002D)>';
XMLCDATASectionString: '<Any XMLString that does not contain the string "]]>">';
XMLCharacterData: '<Any XMLCharacterDataString that does not contain the string "]]>">';
XMLCharacterDataString: '<Any Unicode character except < or &>'+;
VERSION: 'version';
XML: 'xml';
CDATA: 'CDATA';
XMLNS: 'xmlns';
ENCODING: 'encoding';
STANDALONE: 'standalone';
YES: Y E S;
NO: N O;
XMLEntityName: 'lt' | 'gt' | 'amp' | 'apos' | 'quot';
XMLNamespaceNameStartCharacter: '<Any xMLNameCharacter except :>';
XMLNotDoubleQuote: '<Any XMLCharacter except <, &, or DoubleQuoteCharacter>';
XMLNotSingleQuote: '<Any XMLCharacter except <, &, or SingleQuoteCharacter>';

ZERO: '0';
ONE: '1';
TWO: '2';
THREE: '3';
FOUR: '4';
FIVE: '5';
SIX: '6';
SEVEN: '7';
EIGHT: '8';
NINE: '9';

LINE_TERMINATOR: '\r' | '\n';
SINGLE_QUOTE_CHAR: '\'';
DOUBLE_QUOTE_CHARACTER: '"';
QUESTION_MARK: '?';
COMMA: ',';
ASTERISK: '*';
EQUALS: '=';
LEFT_ARROW: '<';
RIGHT_ARROW: '>';
SLASH: '/';
DOUBLE_BACK_SLASH: '\\';
CARET: '^';
COLON: ':';
SEMICOLON: ';';
AMPERSAND: '&';
EXCLAMATION: '!';
POUND: '#';
UNDERSCORE: '_';
PERIOD: '.';
MINUS: '-';
PLUS: '+';
PERCENT: '%';
DOLLAR: '$';
AT: '@';
LEFT_PAREN: '(';
RIGHT_PAREN: ')';
LEFT_BRACE: '{';
RIGHT_BRACE: '}';
LEFT_SQUARE_BRACKET: '[';
RIGHT_SQUARE_BRACKET: ']';
//NOT_LINE_TERMINATOR: '<Any Unicode character except a LINE_TERMINATOR>';

SHORT_CHARACTER: 'S';
UNSIGNED_SHORT_CHARACTER: 'US';
INTEGER_CHARACTER: 'I';
UNSIGNED_INTEGER_CHARACTER: 'UI';
LONG_CHARACTER: 'L';
UNSIGNED_LONG_CHARACTER: 'UL';
SINGLE_CHARACTER: 'F';
DOUBLE_CHARACTER: 'R';
DECIMAL_CHARACTER: 'D';

A: [aA];
B: [bB];
C: [cC];
D: [dD];
E: [eE];
F: [fF];
G: [gG];
H: [hH];
I: [iI];
J: [jJ];
K: [kK];
L: [lL];
M: [mM];
N: [nN];
O: [oO];
P: [pP];
Q: [qQ];
R: [rR];
S: [sS];
T: [tT];
U: [uU];
V: [vV];
W: [wW];
X: [xX];
Y: [yY];
Z: [zZ];

WS
    : [ \t]  -> skip
    ;
    